{"version":3,"sources":["components/statistics/Statistiсs.js","components/FeedbackOptions.js","components/statistics/Title.js","components/statistics/Notification.js","components/App.js","index.js","components/statistics/Statistics.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","st","statistics__list","statistics__item","FeedbackOptions","options","this","props","map","el","type","btn","id","onClick","onLeaveFeedback","Component","defaultProps","PropTypes","array","isRequired","Section","title","Notification","message","App","state","handleIncrementVote","evt","target","setState","prevState","textContent","countTotalFeedback","Object","values","reduce","prevValue","nextValue","countPositiveFeedbackPercentage","Math","round","percentage","keys","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"+QA6BeA,EAvBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,4CACA,qBAAIC,UAAWC,IAAGC,iBAAlB,UACE,qBAAIF,UAAWC,IAAGE,iBAAlB,mBAA2CR,KAC3C,qBAAIK,UAAWC,IAAGE,iBAAlB,sBAA8CP,KAC9C,qBAAII,UAAWC,IAAGE,iBAAlB,kBAA0CN,KAC1C,qBAAIG,UAAWC,IAAGE,iBAAlB,oBAA4CL,KAC5C,qBAAIE,UAAWC,IAAGE,iBAAlB,gCACsBJ,EADtB,c,iBCTFK,E,4JAOJ,WAAU,IAAD,OACCC,EAAYC,KAAKC,MAAjBF,QACR,OACE,8BACGA,EAAQG,KAAI,SAACC,GAAD,OACX,wBACEC,KAAK,SACLV,UAAWC,IAAGU,IACdC,GAAIH,EAEJI,QAAS,EAAKN,MAAMO,gBALtB,SAOGL,GAHIA,Y,GAhBaM,aAAxBX,EACGY,aAAe,CACpBX,QAASY,IAAUC,MAAMC,YAwBdf,QC9BTgB,E,4JACJ,WACE,OAAO,6BAAKd,KAAKC,MAAMc,Y,GAFLN,aAKPK,ICLTE,E,4JACJ,WACE,OAAO,6BAAKhB,KAAKC,MAAMgB,c,GAFAR,aAKZO,ICFTE,E,4MACJC,MAAQ,CACN9B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAMP6B,oBAAsB,SAACC,GACrB,IAAQC,EAAWD,EAAXC,OAER,EAAKC,UAAS,SAACC,GAAD,sBAEXF,EAAOG,YAAcD,EAAUF,EAAOG,aAAe,O,EAG1DC,mBAAqB,WAMnB,OAHcC,OAAOC,OAAO,EAAKT,OAAOU,QACtC,SAACC,EAAWC,GAAZ,OAA0BD,EAAYC,M,EAK1CC,gCAAkC,WAOhC,OAN2BC,KAAKC,MACX,IAAlB,EAAKf,MAAM9B,KAAc,EAAKqC,uB,4CASnC,WACE,MAA+B1B,KAAKmB,MAA5B9B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQQ,KAAK0B,qBACbS,EAAanC,KAAKgC,kCACxB,OACE,gCACE,cAAC,EAAD,CAASjB,MAAM,0BACf,cAAC,EAAD,CACEhB,QAAS4B,OAAOS,KAAKpC,KAAKmB,OAC1BX,gBAAiBR,KAAKoB,sBAGxB,cAAC,EAAD,CAAcH,QAAQ,sBACtB,cAAC,EAAD,CACE5B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoB0C,W,GAxDZ1B,aA+DHS,IC9DfmB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCT1BC,EAAOC,QAAU,CAAC,WAAa,+BAA+B,iBAAmB,qCAAqC,iBAAmB,qCAAqC,iBAAmB,wC","file":"static/js/main.bbfca600.chunk.js","sourcesContent":["// import React, { Component } from \"react\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport st from \"./Statistics.module.css\";\n\n// ===\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <h2>Statistics</h2>\n      <ul className={st.statistics__list}>\n        <li className={st.statistics__item}>Good: {good}</li>\n        <li className={st.statistics__item}>Neutral: {neutral}</li>\n        <li className={st.statistics__item}>Bad: {bad}</li>\n        <li className={st.statistics__item}>Total: {total}</li>\n        <li className={st.statistics__item}>\n          Positive feedback: {positivePercentage}%\n        </li>\n      </ul>\n    </>\n  );\n};\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n// ==============\n// class Statistics extends Component {\n//   static defaultProps = {\n//     good: PropTypes.number.isRequired,\n//     neutral: PropTypes.number.isRequired,\n//     bad: PropTypes.number.isRequired,\n//     total: PropTypes.number.isRequired,\n//     positivePercentage: PropTypes.number.isRequired,\n//   };\n\n//   render() {\n//     return (\n//       <>\n//         <h2>Statistics</h2>\n//         <ul className={st.statistics__list}>\n//           {Object.entries(this.props).map(([key, value]) => (\n//             <li className={st.statistics__item} id={key} key={key}>\n//               {key}:<span className={st.statistics__vote}>{value}</span>\n//             </li>\n//           ))}\n//         </ul>\n//       </>\n//     );\n//   }\n// }\n\n// ===============\n///\n//  {/* {Object.keys(this.props).map((el) => (\n//             // const itemId = shortid.generate()\n//             <li className={st.statistics__item} id={el} key={el}>\n//               {el}:\n//               <span className={st.statistics__vote}>{this.props.value}.</span>;\n//             </li>\n//           ))} */}\n//           {/* <li> Total: <span>{}</span>   </li> */}\n//           {/* {/* <li>Positive feedback: <span>{}%</span></li> */}\n","import PropTypes from \"prop-types\";\n// [option]: state[option] + 1,\nimport st from \"./statistics/Statistics.module.css\";\n// import Statistics from \"./statistics/Statistiсs\";\nimport React, { Component } from \"react\";\n\nclass FeedbackOptions extends Component {\n  static defaultProps = {\n    options: PropTypes.array.isRequired,\n    // good: PropTypes.number.isRequired,\n    // neutral: PropTypes.number.isRequired,\n    // bad: PropTypes.number.isRequired,\n  };\n  render() {\n    const { options } = this.props;\n    return (\n      <div>\n        {options.map((el) => (\n          <button\n            type=\"button\"\n            className={st.btn}\n            id={el}\n            key={el}\n            onClick={this.props.onLeaveFeedback}\n          >\n            {el}\n          </button>\n        ))}\n      </div>\n    );\n  }\n}\nexport default FeedbackOptions;\n// render() {\n//   const { options } = this.props;\n//   return (\n//     <div>\n//       <h1>Please leave feedback</h1>\n//       {options.map((el) => (\n//         //  btnId = shortid.generate()\n\n//         <button\n//           type=\"button\"\n//           className={st.btn}\n//           id={el}\n//           key={el}\n//           onClick={this.handleIncrementVote}\n//         >\n//           {el}\n//         </button>\n//       ))}\n//       {/* <Statistics\n//         good={this.state.good}\n//         neutral={this.state.neutral}\n//         bad={this.state.bad}\n//       /> */}\n\n//       {/* <div className={st.statistics}>\n//         <h2>Statistics</h2>\n//         <ul className={st.statistics__list}>\n//           {options.map((el) => (\n//             // const itemId = shortid.generate()\n//             <li className={st.statistics__item} id={el} key={el}>\n//               {el}:\n//               <span className={st.statistics__vote}>{this.state.value}.</span>\n//             </li>\n//           ))} */}\n//       {/* <li> Total: <span>{}</span>   </li> */}\n//       {/* {/* <li>Positive feedback: <span>{}%</span></li> */}\n//       {/* </ul>\n//       </div> */}\n//     </div>\n//   );\n// }\n\n// =============\n// / onAction = () => {\n//   document.querySelectorAll(\".statistics__item\").map((el) => {\n//     console.log(this.state);\n//     // if (el === this.state){\n//     //   el.textContent = this.state.value\n//     // }\n//   });\n// };\n// const { target } = evt;\n// return this.setState((prevState) => {\n//   Object.entries(this.state).map(([key, value]) => {\n//     // console.log(key, \"k\");\n//     // console.log(value, \"v\");\n//     if (target.textContent === key) {\n//       return (prevState += 1);\n//     }\n//     return value;\n//   });\n// });\n\n//  this.setState((prevState) => {\n//   [target.textContent]: prevState[target.textContent] + 1\n// if (target.textContent === 'good'){\n//   this.state. += 1\n// }\n// Object.entries(this.state).map(([key, value]) => {\n//   if (target.textContent === key) {\n//     return (value += 1);\n//   }\n//   return value;\n// });\n// });\n//   return this.setState((prevState) => {\n//     Object.entries(this.state).map(([key, value]) => {\n//       if (target.textContent === key) {\n//         return (value += 1);\n//       }\n//       return value;\n//     });\n// });\n// x = () =>\n// this.setState((option) => {\n// option:\n// console.log(Object.values(prevState));\n// console.log(target.textContent);\n// if (target === Object.keys(prevState)) {\n//   this.state.good.value += 1;\n// }\n// return {\n// if(target === Object.keys(prevState))\n//   if(target.textContent === Object.keys(prevState)){\n//   ?  (Object.values(prevState) +=1 )\n// : console.log(target.textContent)};}\n// }\n// });\n// };\n\n// onClick = (el) => {\n//   this.setState({state[key] + 1});\n//   console.log(this + 1);\n// };\n","import React, { Component } from \"react\";\r\n\r\nclass Section extends Component {\r\n  render() {\r\n    return <h1>{this.props.title}</h1>;\r\n  }\r\n}\r\nexport default Section;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Notification extends Component {\r\n  render() {\r\n    return <h3>{this.props.message}</h3>;\r\n  }\r\n}\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport Statistics from \"./statistics/Statistiсs\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./statistics/Title\";\nimport Notification from \"./statistics/Notification\";\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n    // good: 5,\n    // bad: 5,\n    // neutral: 6,\n  };\n\n  handleIncrementVote = (evt) => {\n    const { target } = evt;\n    // console.log(evt.target);\n    this.setState((prevState) => ({\n      //   [evt]: prevState[evt] + 1,\n      [target.textContent]: prevState[target.textContent] + 1,\n    }));\n  };\n  countTotalFeedback = () => {\n    // this.setState(() => {\n    // });\n    const total = Object.values(this.state).reduce(\n      (prevValue, nextValue) => prevValue + nextValue\n    );\n    return total;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    const positivePercentage = Math.round(\n      (this.state.good * 100) / this.countTotalFeedback()\n    );\n    // if (isNaN(positivePercentage)) {\n    //   return \"there will be a percentage\";\n    // } else {\n    return positivePercentage;\n    // }\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const percentage = this.countPositiveFeedbackPercentage();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\"></Section>\n        <FeedbackOptions\n          options={Object.keys(this.state)}\n          onLeaveFeedback={this.handleIncrementVote}\n        />\n        {/* === */}\n        <Notification message=\"No feedback given\"></Notification>\n        <Statistics\n          good={good}\n          neutral={neutral}\n          bad={bad}\n          total={total}\n          positivePercentage={percentage}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n// Math.round(\n//   (this.state.good / this.countTotalFeedback()) * 100\n// // );\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Statistics_statistics__xyKbB\",\"statistics__list\":\"Statistics_statistics__list__28sG1\",\"statistics__item\":\"Statistics_statistics__item__1yo44\",\"statistics__vote\":\"Statistics_statistics__vote__2UGEv\"};"],"sourceRoot":""}